// Node class represents each element in the linked list
class Node {
    int data;       // Data stored in the node
    Node next;      // Reference to the next node
    
    // Constructor to create a new node with given data
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

// LinkedList class implements all the operations
public class LinkedList {
    private Node head;  // Head of the list
    private Node tail;  // Tail of the list (for efficient addLast operations)
    private int size;   // Size of the list
    
    // Constructor to initialize an empty linked list
    public LinkedList() {
        head = null;
        tail = null;
        size = 0;
    }
    
    // Method to check if the list is empty
    // Time Stamp: 20:43 - isEmpty method in linked list
    public boolean isEmpty() {
        return head == null;  // If head is null, list is empty
    }
    
    // Method to add a node at the beginning of the list
    // Time Stamp: 23:44 - addFirst method in linked list
    public void addFirst(int data) {
        Node newNode = new Node(data);  // Create new node
        
        if (isEmpty()) {
            // If list is empty, new node becomes both head and tail
            head = newNode;
            tail = newNode;
        } else {
            // New node points to current head, then becomes new head
            newNode.next = head;
            head = newNode;
        }
        size++;  // Increment size
    }
    
    // Method to add a node at the end of the list
    // Time Stamp: 35:30 - addLast method in linked list
    public void addLast(int data) {
        Node newNode = new Node(data);  // Create new node
        
        if (isEmpty()) {
            // If list is empty, new node becomes both head and tail
            head = newNode;
            tail = newNode;
        } else {
            // Current tail's next points to new node, then new node becomes tail
            tail.next = newNode;
            tail = newNode;
        }
        size++;  // Increment size
    }
    
    // Method to remove the first node from the list
    // Time Stamp: 47:05 - removeFirst method in linked list
    public int removeFirst() {
        if (isEmpty()) {
            throw new RuntimeException("List is empty");  // Can't remove from empty list
        }
        
        int removedData = head.data;  // Store data to return
        
        if (head == tail) {
            // Only one node in list
            head = null;
            tail = null;
        } else {
            // Move head to next node
            head = head.next;
        }
        
        size--;  // Decrement size
        return removedData;
    }
    
    // Method to remove the last node from the list
    // Time Stamp: 52:48 - removeLast method in linked list
    public int removeLast() {
        if (isEmpty()) {
            throw new RuntimeException("List is empty");  // Can't remove from empty list
        }
        
        int removedData = tail.data;  // Store data to return
        
        if (head == tail) {
            // Only one node in list
            head = null;
            tail = null;
        } else {
            // Traverse to find the node before tail
            Node current = head;
            while (current.next != tail) {
                current = current.next;
            }
            
            // Update tail and remove reference to old tail
            current.next = null;
            tail = current;
        }
        
        size--;  // Decrement size
        return removedData;
    }
    
    // Method to insert a node at a specific position
    // Time Stamp: 01:02:42 - insertNode method in linked list
    public void insertNode(int data, int position) {
        if (position < 0 || position > size) {
            throw new IllegalArgumentException("Invalid position");  // Validate position
        }
        
        if (position == 0) {
            addFirst(data);  // Insert at beginning
        } else if (position == size) {
            addLast(data);   // Insert at end
        } else {
            // Insert in middle
            Node newNode = new Node(data);
            Node current = head;
            
            // Traverse to node before insertion point
            for (int i = 0; i < position - 1; i++) {
                current = current.next;
            }
            
            // Update references to insert new node
            newNode.next = current.next;
            current.next = newNode;
            size++;  // Increment size
        }
    }
    
    // Method to remove a node at a specific position
    // Time Stamp: 01:29:32 - removeNode method in linked list
    public int removeNode(int position) {
        if (isEmpty()) {
            throw new RuntimeException("List is empty");  // Can't remove from empty list
        }
        
        if (position < 0 || position >= size) {
            throw new IllegalArgumentException("Invalid position");  // Validate position
        }
        
        if (position == 0) {
            return removeFirst();  // Remove from beginning
        } else if (position == size - 1) {
            return removeLast();   // Remove from end
        } else {
            // Remove from middle
            Node current = head;
            
            // Traverse to node before removal point
            for (int i = 0; i < position - 1; i++) {
                current = current.next;
            }
            
            // Store data and update references to remove node
            int removedData = current.next.data;
            current.next = current.next.next;
            size--;  // Decrement size
            return removedData;
        }
    }
    
    // Method to display all elements in the list
    // Time Stamp: 01:52:54 - display method in linked list
    public void display() {
        if (isEmpty()) {
            System.out.println("List is empty");
            return;
        }
        
        Node current = head;
        System.out.print("Linked List: ");
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
    
    // Method to get the size of the list
    public int getSize() {
        return size;
    }
    
    // Main method to demonstrate usage
    // Time Stamp: 01:56:22 - use linked list
    public static void main(String[] args) {
        LinkedList list = new LinkedList();
        
        // Adding elements
        list.addFirst(10);
        list.addLast(20);
        list.addLast(30);
        list.insertNode(15, 1);
        
        // Displaying list
        list.display();  // Output: Linked List: 10 -> 15 -> 20 -> 30 -> null
        
        // Removing elements
        System.out.println("Removed: " + list.removeFirst());  // Removes 10
        System.out.println("Removed: " + list.removeNode(1));  // Removes 20
        
        // Displaying final list
        list.display();  // Output: Linked List: 15 -> 30 -> null
    }
}